451. Sort Characters By Frequency
Solved
Medium
Topics
Companies
Given a string s, sort it in decreasing order based on the frequency of the characters. The frequency of a character is the number of times it appears in the string.

Return the sorted string. If there are multiple answers, return any of them.

 

Example 1:

Input: s = "tree"
Output: "eert"
Explanation: 'e' appears twice while 'r' and 't' both appear once.
So 'e' must appear before both 'r' and 't'. Therefore "eetr" is also a valid answer.
Example 2:

Input: s = "cccaaa"
Output: "aaaccc"
Explanation: Both 'c' and 'a' appear three times, so both "cccaaa" and "aaaccc" are valid answers.
Note that "cacaca" is incorrect, as the same characters must be together.
Example 3:

Input: s = "Aabb"
Output: "bbAa"
Explanation: "bbaA" is also a valid answer, but "Aabb" is incorrect.
Note that 'A' and 'a' are treated as two different characters.
 

Constraints:

1 <= s.length <= 5 * 105
s consists of uppercase and lowercase English letters and digits.

answe code

char* frequencySort(char* s) {
    int hash[256] = {0};

    int i;
    for(i = 0; i<strlen(s); i++){
        hash[s[i]]++;
    }

    char * ans = (char*)malloc(sizeof(char) * strlen(s) + 1);
    int len = 0;
    int j = 0;
    while(j < 256){
    i = 0;
    int max = 0, ith;
    for(i = 0; i < 256; i++){
        if(hash[i] > max)
            max = hash[i];
    }
    for(i=0;i<256;i++){
        if(hash[i] == max){
            ith = i;
            break;
        }
    }
    for(i = 0; i < max; i++){
        ans[len] = (char)ith;
        len++;
    }
    hash[ith] = 0;

    j++;
    }
    ans[len] = '\0';
    return ans;


}
