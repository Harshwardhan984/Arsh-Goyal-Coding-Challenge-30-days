36. Valid Sudoku

Medium

  
Determine if a 9 x 9 Sudoku board is valid. Only the filled cells need to be validated according to the following rules:

Each row must contain the digits 1-9 without repetition.
Each column must contain the digits 1-9 without repetition.
Each of the nine 3 x 3 sub-boxes of the grid must contain the digits 1-9 without repetition.
Note:

A Sudoku board (partially filled) could be valid but is not necessarily solvable.
Only the filled cells need to be validated according to the mentioned rules.
 

Example 1:


Input: board = 
[["5","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: true
Example 2:

Input: board = 
[["8","3",".",".","7",".",".",".","."]
,["6",".",".","1","9","5",".",".","."]
,[".","9","8",".",".",".",".","6","."]
,["8",".",".",".","6",".",".",".","3"]
,["4",".",".","8",".","3",".",".","1"]
,["7",".",".",".","2",".",".",".","6"]
,[".","6",".",".",".",".","2","8","."]
,[".",".",".","4","1","9",".",".","5"]
,[".",".",".",".","8",".",".","7","9"]]
Output: false
Explanation: Same as Example 1, except with the 5 in the top left corner being modified to 8. Since there are two 8's in the top left 3x3 sub-box, it is invalid.
 

Constraints:

board.length == 9
board[i].length == 9
board[i][j] is a digit 1-9 or '.'

  answer code

  class Solution {
public:

    bool isValidSudoku(vector<vector<char>>& board) {
        //row cheak
        for(int j = 0; j < 9; j++){
        int arr[10] = {0};
        for(int i = 0; i < 9; i++){
            if(board[j][i] != '.'){
                if(arr[board[j][i] - '0'] == 0) arr[board[j][i] - '0']++;
                else return false;
            }
        }
        }
        //col cheak
        for(int j = 0; j < 9; j++){
        int arr[10] = {0};
        for(int i = 0; i < 9; i++){
            if(board[i][j] != '.'){
                if(arr[board[i][j] - '0'] == 0) arr[board[i][j] - '0']++;
                else return false;
            }
        }
        }
        //box cheak
        for(int r = 0; r < 8; r += 3){
            for(int c = 0; c < 8; c += 3){
        int col = c, row = r;
        int arr[10] = {0};
        for(int i = col; i<col+3;i++){
            for(int j = row; j < row + 3; j++){
                if(board[i][j] != '.'){
                if(arr[board[i][j] - '0'] == 0) arr[board[i][j] - '0']++;
                else return false;
            }
            }
        }
            }
        }
        return true;
    }
};


best answer

  class Solution {
public:
    bool isValidSudoku(vector<vector<char>>& board) {
        int row[9][9]={0};
        int column[9][9]={0};
        int box[9][9]={0};
        for(int i=0;i<9;i++){
            for(int j=0;j<9;j++){
                if(board[i][j]=='.'){
                    continue;
                }
                int n=board[i][j]-'1';
                if(row[i][n]==1 || column[j][n]==1 || box[3*(i/3)+j/3][n]==1){
                    return false;
                }
                row[i][n]=1;
                column[j][n]=1;
                box[3*(i/3)+j/3][n]=1;              
            }
        }
        return true;
    }
};
