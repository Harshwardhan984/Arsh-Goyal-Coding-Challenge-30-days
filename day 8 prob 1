1334. Find the City With the Smallest Number of Neighbors at a Threshold Distance

Medium

There are n cities numbered from 0 to n-1. Given the array edges where edges[i] = [fromi, toi, weighti] represents a bidirectional and weighted edge between cities fromi and toi, and given the integer distanceThreshold.

Return the city with the smallest number of cities that are reachable through some path and whose distance is at most distanceThreshold, If there are multiple such cities, return the city with the greatest number.

Notice that the distance of a path connecting cities i and j is equal to the sum of the edges' weights along that path.

 

Example 1:



Input: n = 4, edges = [[0,1,3],[1,2,1],[1,3,4],[2,3,1]], distanceThreshold = 4
Output: 3
Explanation: The figure above describes the graph. 
The neighboring cities at a distanceThreshold = 4 for each city are:
City 0 -> [City 1, City 2] 
City 1 -> [City 0, City 2, City 3] 
City 2 -> [City 0, City 1, City 3] 
City 3 -> [City 1, City 2] 
Cities 0 and 3 have 2 neighboring cities at a distanceThreshold = 4, but we have to return city 3 since it has the greatest number.
Example 2:



Input: n = 5, edges = [[0,1,2],[0,4,8],[1,2,3],[1,4,2],[2,3,1],[3,4,1]], distanceThreshold = 2
Output: 0
Explanation: The figure above describes the graph. 
The neighboring cities at a distanceThreshold = 2 for each city are:
City 0 -> [City 1] 
City 1 -> [City 0, City 4] 
City 2 -> [City 3, City 4] 
City 3 -> [City 2, City 4]
City 4 -> [City 1, City 2, City 3] 
The city 0 has 1 neighboring city at a distanceThreshold = 2.
 

Constraints:

2 <= n <= 100
1 <= edges.length <= n * (n - 1) / 2
edges[i].length == 3
0 <= fromi < toi < n
1 <= weighti, distanceThreshold <= 10^4
All pairs (fromi, toi) are distinct.


Accepted
231.7K
Submissions
335.7K
Acceptance Rate
69.0%
Topics
Dynamic Programming
Graph
Shortest Path
Companies
Hint 1
Use Floyd-Warshall's algorithm to compute any-point to any-point distances. (Or can also do Dijkstra from every node due to the weights are non-negative).
Hint 2
For each city calculate the number of reachable cities within the threshold, then search for the optimal city.

  answer code

  /*class Solution {
public:
    void dijkstra(int n, vector<vector<int>>& graph, int source, vector<int> &disarr) {
    // `dist` array to store the shortest distance from the source to each node
   vector<int> dist(n, INT_MAX);
    
    dist[source] = 0;

    // Min-heap priority queue to store {distance, node} pairs
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> pq;
    pq.push({0, source}); // Push the source with distance 0

    while (!pq.empty()) {
        auto [d, u] = pq.top();
        pq.pop();

        // Skip processing if the current distance is not optimal
        if (d > dist[u]) continue;

        // Traverse all neighbors of node `u`
        for (int v = 0; v < n; v++) {
            if (graph[u][v] != 0) { // Check for an edge
                int newDist = dist[u] + graph[u][v];
                if (newDist < dist[v]) {
                    dist[v] = newDist;
                    pq.push({newDist, v});
                }
            }
        }
        
    }
    disarr = dist;
    }
    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        int ans = 0, leastcity = n;
        for(int i = 0; i < n; i++){
            vector<int> disscur;
            int numcity = 0;
            dijkstra(n,edges,i,disscur);
            for(int j = 0; j < n; j++){
                if(disscur[j] < distanceThreshold) numcity++;
            }
            if(numcity <= leastcity){
                leastcity = numcity;
            ans = max(ans, i);
            }
        }
        return ans;
    }
};
*/
class Solution {
public:
    // Modified Dijkstra's algorithm
    void dijkstra(int n, vector<vector<pair<int, int>>>& graph, int source, vector<int>& dist) {
        dist.assign(n, INT_MAX);
        dist[source] = 0;

        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> pq;
        pq.push({0, source});

        while (!pq.empty()) {
            auto [d, u] = pq.top();
            pq.pop();

            if (d > dist[u]) continue;

            for (auto& [v, weight] : graph[u]) {
                int newDist = dist[u] + weight;
                if (newDist < dist[v]) {
                    dist[v] = newDist;
                    pq.push({newDist, v});
                }
            }
        }
    }

    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {
        // Create an adjacency list representation of the graph
        vector<vector<pair<int, int>>> graph(n);
        for (auto& edge : edges) {
            int u = edge[0], v = edge[1], weight = edge[2];
            graph[u].push_back({v, weight});
            graph[v].push_back({u, weight}); // Bidirectional graph
        }

        int ans = -1, leastCity = n;

        // Apply Dijkstra's algorithm for each city
        for (int i = 0; i < n; i++) {
            vector<int> dist;
            dijkstra(n, graph, i, dist);

            // Count reachable cities within the distance threshold
            int numCities = 0;
            for (int j = 0; j < n; j++) {
                if (dist[j] <= distanceThreshold) numCities++;
            }

            // Update the city with the least reachable neighbors
            if (numCities < leastCity || (numCities == leastCity && i > ans)) {
                leastCity = numCities;
                ans = i;
            }
        }

        return ans;
    }
};
