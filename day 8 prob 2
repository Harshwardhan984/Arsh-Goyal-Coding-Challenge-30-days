1823. Find the Winner of the Circular Game

Medium

There are n friends that are playing a game. The friends are sitting in a circle and are numbered from 1 to n in clockwise order. More formally, moving clockwise from the ith friend brings you to the (i+1)th friend for 1 <= i < n, and moving clockwise from the nth friend brings you to the 1st friend.

The rules of the game are as follows:

Start at the 1st friend.
Count the next k friends in the clockwise direction including the friend you started at. The counting wraps around the circle and may count some friends more than once.
The last friend you counted leaves the circle and loses the game.
If there is still more than one friend in the circle, go back to step 2 starting from the friend immediately clockwise of the friend who just lost and repeat.
Else, the last friend in the circle wins the game.
Given the number of friends, n, and an integer k, return the winner of the game.

 

Example 1:


Input: n = 5, k = 2
Output: 3
Explanation: Here are the steps of the game:
1) Start at friend 1.
2) Count 2 friends clockwise, which are friends 1 and 2.
3) Friend 2 leaves the circle. Next start is friend 3.
4) Count 2 friends clockwise, which are friends 3 and 4.
5) Friend 4 leaves the circle. Next start is friend 5.
6) Count 2 friends clockwise, which are friends 5 and 1.
7) Friend 1 leaves the circle. Next start is friend 3.
8) Count 2 friends clockwise, which are friends 3 and 5.
9) Friend 5 leaves the circle. Only friend 3 is left, so they are the winner.
Example 2:

Input: n = 6, k = 5
Output: 1
Explanation: The friends leave in this order: 5, 4, 6, 2, 3. The winner is friend 1.
 

Constraints:

1 <= k <= n <= 500

  answer 

  This problem is a variation of the **Josephus problem**, which can be solved mathematically using a recursive or iterative formula. Here's how to approach it:

---

### **Josephus Problem Formula**
Let \( J(n, k) \) represent the position of the winner when there are \( n \) friends and the step size is \( k \):
1. **Recursive Formula:**
   \[
   J(n, k) =
   \begin{cases}
   0 & \text{if } n = 1 \\
   (J(n-1, k) + k) \mod n & \text{if } n > 1
   \end{cases}
   \]
   Here:
   - \( J(n-1, k) \) is the winner's position for \( n-1 \) friends.
   - \( (J(n-1, k) + k) \mod n \) adjusts the position after removing one person.
   - The result is zero-based, so you need to add 1 at the end to convert it to a one-based index.

2. **Iterative Formula:**
   You can also calculate the result iteratively:
   \[
   J = 0 \quad (\text{for } n = 1)
   \]
   For \( i = 2 \) to \( n \):
   \[
   J = (J + k) \mod i
   \]
   At the end, add 1 to convert it to a one-based index.

---

### **Code Implementation**

#### Recursive Solution (Mathematical Formula):
```cpp
class Solution {
public:
    int findTheWinner(int n, int k) {
        return josephus(n, k) + 1; // Convert zero-based result to one-based
    }
    
    int josephus(int n, int k) {
        if (n == 1) return 0; // Base case: one person left
        return (josephus(n - 1, k) + k) % n; // Recursive step
    }
};
```

#### Iterative Solution:
```cpp
class Solution {
public:
    int findTheWinner(int n, int k) {
        int winner = 0; // Base case: one person left (zero-based index)
        for (int i = 2; i <= n; i++) {
            winner = (winner + k) % i;
        }
        return winner + 1; // Convert zero-based result to one-based
    }
};
```

---

### **Explanation of the Iterative Approach**
1. Start with \( J = 0 \) when there is only one person.
2. For each subsequent number of people \( i \), update the winner's position:
   \[
   J = (J + k) \mod i
   \]
3. Repeat until you reach \( n \) friends.
4. Convert the zero-based result to a one-based index by adding 1.

---

### **Example Walkthrough**

#### Input: \( n = 5, k = 2 \)
1. Start with \( J = 0 \) (1 person left).
2. \( i = 2 \): \( J = (0 + 2) \% 2 = 0 \)
3. \( i = 3 \): \( J = (0 + 2) \% 3 = 2 \)
4. \( i = 4 \): \( J = (2 + 2) \% 4 = 0 \)
5. \( i = 5 \): \( J = (0 + 2) \% 5 = 2 \)
6. Final result: \( J + 1 = 3 \) (one-based index).

#### Input: \( n = 6, k = 5 \)
1. Start with \( J = 0 \) (1 person left).
2. \( i = 2 \): \( J = (0 + 5) \% 2 = 1 \)
3. \( i = 3 \): \( J = (1 + 5) \% 3 = 0 \)
4. \( i = 4 \): \( J = (0 + 5) \% 4 = 1 \)
5. \( i = 5 \): \( J = (1 + 5) \% 5 = 1 \)
6. \( i = 6 \): \( J = (1 + 5) \% 6 = 0 \)
7. Final result: \( J + 1 = 1 \) (one-based index).

---

This method is efficient with \( O(n) \) time complexity and works for large values of \( n \).
