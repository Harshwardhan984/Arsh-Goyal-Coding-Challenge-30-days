2002. Maximum Product of the Length of Two Palindromic Subsequences
  
Medium

Given a string s, find two disjoint palindromic subsequences of s such that the product of their lengths is maximized. The two subsequences are disjoint if they do not both pick a character at the same index.

Return the maximum possible product of the lengths of the two palindromic subsequences.

A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters. A string is palindromic if it reads the same forward and backward.

 

Example 1:

example-1
Input: s = "leetcodecom"
Output: 9
Explanation: An optimal solution is to choose "ete" for the 1st subsequence and "cdc" for the 2nd subsequence.
The product of their lengths is: 3 * 3 = 9.
Example 2:

Input: s = "bb"
Output: 1
Explanation: An optimal solution is to choose "b" (the first character) for the 1st subsequence and "b" (the second character) for the 2nd subsequence.
The product of their lengths is: 1 * 1 = 1.
Example 3:

Input: s = "accbcaxxcxx"
Output: 25
Explanation: An optimal solution is to choose "accca" for the 1st subsequence and "xxcxx" for the 2nd subsequence.
The product of their lengths is: 5 * 5 = 25

  answer code

  class Solution {
public:
    long  ans = 0;

    bool isPalid(string &s)
    {
        int start=0, end = s.length()-1;
        while(start < end)
        {
            if(s[start] != s[end]) return false;
            start++; end--;
        }
        return true;
    }
     void helper(string &s,int idx,string &s1,string &s2){
            if(isPalid(s1) && isPalid(s2)){
                long temp= (int) s1.length() * s2.length();
                ans= max(ans, temp);     
           }
            for(int i=idx;i<s.size();i++){
                s1.push_back(s[i]);
                helper(s,i+1,s1,s2);
                s1.pop_back();

                s2.push_back(s[i]);
                helper(s,i+1,s1,s2);
                s2.pop_back();
            }
           return;
    }
    int maxProduct(string s) {
        string s1="";
        string s2="";
        helper(s,0,s1,s2);
        return ans;
    }
};
