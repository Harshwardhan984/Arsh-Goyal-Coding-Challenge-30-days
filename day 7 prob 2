2385. Amount of Time for Binary Tree to Be Infected

Medium

You are given the root of a binary tree with unique values, and an integer start. At minute 0, an infection starts from the node with value start.

Each minute, a node becomes infected if:

The node is currently uninfected.
The node is adjacent to an infected node.
Return the number of minutes needed for the entire tree to be infected.

 

Example 1:


Input: root = [1,5,3,null,4,10,6,9,2], start = 3
Output: 4
Explanation: The following nodes are infected during:
- Minute 0: Node 3
- Minute 1: Nodes 1, 10 and 6
- Minute 2: Node 5
- Minute 3: Node 4
- Minute 4: Nodes 9 and 2
It takes 4 minutes for the whole tree to be infected so we return 4.
Example 2:


Input: root = [1], start = 1
Output: 0
Explanation: At minute 0, the only node in the tree is infected so we return 0.
 

Constraints:

The number of nodes in the tree is in the range [1, 105].
1 <= Node.val <= 105
Each node has a unique value.
A node with a value of start exists in the tree.

  Answer code

  /**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* createParentMapping(TreeNode* root, int start, map<TreeNode*, TreeNode*> &nodeToParent){

        TreeNode* res= NULL;

        queue<TreeNode*> q;
        q.push(root);
        nodeToParent[root] = NULL;

        while(!q.empty()){

            TreeNode* front = q.front();
            q.pop();

            if(front->val == start) res = front;

            if(front->left){
                q.push(front->left);
                nodeToParent[front->left] = front;
            }

            if(front->right){
                q.push(front->right);
                nodeToParent[front->right] = front;
            }
        }

        return res;
    }

    int solve(TreeNode* root, map<TreeNode*, TreeNode*> &mp){

        map<TreeNode*, bool> visited;
        queue<TreeNode*> q;

        q.push(root);
        visited[root] = true;
        int ans = 0;

        while(!q.empty()){
            int size = q.size();
            bool flag = false;

            for(int i=0; i<size; i++){
                TreeNode* front = q.front();
                q.pop();

                if(front->left && !visited[front->left]){
                    q.push(front->left);
                    visited[front->left] = true;
                    flag = true;
                }

                if(front->right && !visited[front->right]){
                    q.push(front->right);
                    visited[front->right] = true;
                    flag = true;
                }

                if(mp[front] && !visited[mp[front]]){
                    q.push(mp[front]);
                    visited[mp[front]] = true;
                    flag = true;
                }
            }

            if(flag == true) ans++;
        }

        return ans;
    }
public:
    int amountOfTime(TreeNode* root, int start) {
        /* Algo:
        Step 1: create a mapping to store parent node;
        step 2: find the start point
        step 3:  spread of infection
        */
        map<TreeNode*, TreeNode*> nodeToParent;
        TreeNode* startNode = createParentMapping(root, start, nodeToParent);
        int ans = solve(startNode, nodeToParent);
        return ans;
        
    }
};
